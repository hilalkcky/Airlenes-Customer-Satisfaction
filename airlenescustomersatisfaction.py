# -*- coding: utf-8 -*-
"""AirlenesCustomerSatisfaction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v6EFsKga15Q8k2Po3ikmjML9h9VwTKR_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,confusion_matrix,precision_score

data=pd.read_csv("/content/Invistico_Airline.csv")

data.head()

data["satisfaction"].value_counts()

sns.FacetGrid(data,hue="satisfaction",height=6).map(plt.scatter,"Arrival Delay in Minutes","Departure Delay in Minutes").add_legend()

data.shape

data.info()

data.dtypes

data.describe()

data.isnull().sum()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
data["satisfaction"]=le.fit_transform(data["satisfaction"])
data["Gender"]=le.fit_transform(data["Gender"])
data["Customer Type"]=le.fit_transform(data["Customer Type"])
data["Type of Travel"]=le.fit_transform(data["Type of Travel"])
data["Class"]=le.fit_transform(data["Class"])

meanVal = data['Arrival Delay in Minutes'].mean()

data['Arrival Delay in Minutes'].fillna(value=meanVal, inplace=True)

data.head()

data.isnull().sum()

x=data.drop("satisfaction",axis=1)
y=data["satisfaction"]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.44,random_state=52)

rfc=RandomForestClassifier(random_state=50, n_jobs=-1, criterion="entropy" ,max_depth=8,
                                       n_estimators=100, oob_score=True)

rfc.fit(x_train,y_train)

lr=LogisticRegression(random_state=36)
lr.fit(x_train,y_train)

knn=KNeighborsClassifier(n_neighbors=5,algorithm="ball_tree",leaf_size=15,n_jobs=5)
knn.fit(x_train,y_train)

y_pred = rfc.predict(x_test)
predict=lr.predict(x_test)
prediction=knn.predict(x_test)

print('Model accuracy score :',accuracy_score(y_test, y_pred))
print('Model accuracy score :',accuracy_score(y_test, predict))
print('Model accuracy score :',accuracy_score(y_test, prediction))